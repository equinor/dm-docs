"use strict";(self.webpackChunkdevelopment_framework_docs=self.webpackChunkdevelopment_framework_docs||[]).push([[5125],{17728:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var i=t(74848),a=t(28453);const l={},r="TablePluginConfig.json",o={id:"libraries/plugins/table/TableConfig",title:"TablePluginConfig.json",description:"",source:"@site/docs/libraries/plugins/table/TableConfig.md",sourceDirName:"libraries/plugins/table",slug:"/libraries/plugins/table/TableConfig",permalink:"/dm-docs/docs/libraries/plugins/table/TableConfig",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"StackPluginConfig.json",permalink:"/dm-docs/docs/libraries/plugins/stack/StackConfig"},next:{title:"ViewSelectorConfig.json",permalink:"/dm-docs/docs/libraries/plugins/tabs/TabsConfig"}},s={},u=[];function p(n){const e={code:"code",h1:"h1",pre:"pre",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"tablepluginconfigjson",children:"TablePluginConfig.json"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "name": "TablePluginConfig",\n  "type": "CORE:Blueprint",\n  "attributes": [\n    {\n      "name": "type",\n      "type": "CORE:BlueprintAttribute",\n      "attributeType": "string"\n    },\n    {\n      "name": "width",\n      "type": "dmss://system/SIMOS/BlueprintAttribute",\n      "description": "Width of the complete table",\n      "attributeType": "string",\n      "optional": true\n    },\n    {\n      "name": "variant",\n      "type": "CORE:BlueprintAttribute",\n      "description": "Define table variants. Initial variant will be decided by which variant is passed first. Variants are \'view\' and \'edit\'",\n      "attributeType": "PLUGINS:dm-core-plugins/table/TableVariantConfig",\n      "default": [\n        {\n          "name": "view",\n          "type": "PLUGINS:dm-core-plugins/table/TableVariantConfig"\n        }\n      ],\n      "dimensions": "*",\n      "optional": true\n    },\n    {\n      "name": "columns",\n      "type": "CORE:BlueprintAttribute",\n      "description": "Name of primitive child attributes to display in header of item",\n      "attributeType": "PLUGINS:dm-core-plugins/table/TableColumnConfig",\n      "default": [\n        {\n          "type": "./TableColumnConfig",\n          "data": "name",\n          "label": "Name"\n        },\n        {\n          "type": "./TableColumnConfig",\n          "data": "type",\n          "editable": false\n        }\n      ],\n      "dimensions": "*",\n      "optional": true\n    },\n    {\n      "name": "expandableRecipeViewConfig",\n      "type": "CORE:BlueprintAttribute",\n      "attributeType": "CORE:ViewConfig",\n      "optional": true\n    },\n    {\n      "name": "templates",\n      "type": "CORE:BlueprintAttribute",\n      "description": "Attribute on parent (of same type as list) which should be used as template when instantiating new items. (e.g. \'template\' will use the \'template\' attribute on the parent.)",\n      "attributeType": "PLUGINS:dm-core-plugins/common/Template",\n      "dimensions": "*",\n      "optional": true\n    },\n    {\n      "name": "labelByIndex",\n      "type": "CORE:BlueprintAttribute",\n      "description": "Control whether index should be appended to label when table item is opened.",\n      "attributeType": "boolean",\n      "default": false,\n      "optional": true\n    },\n    {\n      "name": "label",\n      "type": "CORE:BlueprintAttribute",\n      "description": "Override label for all items that are opened in a ViewSelector from table.",\n      "attributeType": "string",\n      "optional": true\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(e.h1,{id:"tablefunctionalityconfigjson",children:"TableFunctionalityConfig.json"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "name": "TableFunctionalityConfig",\n  "type": "CORE:Blueprint",\n  "attributes": [\n    {\n      "name": "type",\n      "type": "dmss://system/SIMOS/BlueprintAttribute",\n      "attributeType": "string"\n    },\n    {\n      "name": "delete",\n      "type": "CORE:BlueprintAttribute",\n      "attributeType": "boolean",\n      "default": false,\n      "optional": true\n    },\n    {\n      "name": "add",\n      "type": "CORE:BlueprintAttribute",\n      "attributeType": "boolean",\n      "default": false,\n      "optional": true\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(e.h1,{id:"tablecolumnconfigjson",children:"TableColumnConfig.json"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "name": "TableColumnConfig",\n  "type": "CORE:Blueprint",\n  "description": "In addition to adding columns that extract fields from data, you can also pass predefined fields like ^tab and ^expandable as data name to add predefined functionality to your table. The order of columns you pass is the order it will be printed in.",\n  "attributes": [\n    {\n      "name": "type",\n      "type": "CORE:BlueprintAttribute",\n      "attributeType": "string"\n    },\n    {\n      "name": "data",\n      "type": "CORE:BlueprintAttribute",\n      "description": "Name of field you want to extract from data object",\n      "attributeType": "string"\n    },\n    {\n      "name": "dataType",\n      "type": "CORE:BlueprintAttribute",\n      "description": "Allowed values are \'string\' | \'boolean\' | \'number\' | \'datetime\'",\n      "attributeType": "string",\n      "default": "string",\n      "optional": true\n    },\n    {\n      "name": "presentAs",\n      "type": "CORE:BlueprintAttribute",\n      "description": "If dataType is of type boolean. Available values: checkbox, text",\n      "attributeType": "string",\n      "default": "checkbox",\n      "optional": true\n    },\n    {\n      "name": "label",\n      "type": "CORE:BlueprintAttribute",\n      "description": "Column label. Label will be name of data field by default",\n      "attributeType": "string",\n      "optional": true\n    },\n    {\n      "name": "editable",\n      "type": "CORE:BlueprintAttribute",\n      "description": "Should data be editable in table edit mode.",\n      "attributeType": "boolean",\n      "default": true,\n      "optional": true\n    },\n    {\n      "name": "sortable",\n      "type": "CORE:BlueprintAttribute",\n      "attributeType": "boolean",\n      "default": true,\n      "optional": true\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(e.h1,{id:"tablevariantconfigjson",children:"TableVariantConfig.json"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "name": "TableVariantConfig",\n  "type": "CORE:Blueprint",\n  "attributes": [\n    {\n      "name": "type",\n      "type": "CORE:BlueprintAttribute",\n      "attributeType": "string"\n    },\n    {\n      "name": "name",\n      "type": "CORE:BlueprintAttribute",\n      "description": "Available variants: view, edit",\n      "attributeType": "string"\n    },\n    {\n      "name": "density",\n      "type": "CORE:BlueprintAttribute",\n      "description": "Available values: compact, comfortable",\n      "attributeType": "string",\n      "default": "compact",\n      "optional": true\n    },\n    {\n      "name": "functionality",\n      "type": "CORE:BlueprintAttribute",\n      "description": "Table functionality config",\n      "attributeType": "PLUGINS:dm-core-plugins/table/TableFunctionalityConfig",\n      "default": {\n        "type": "PLUGINS:dm-core-plugins/table/TableFunctionalityConfig",\n        "add": true,\n        "delete": true\n      },\n      "optional": true\n    }\n  ]\n}\n'})})]})}function d(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(p,{...n})}):p(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>o});var i=t(96540);const a={},l=i.createContext(a);function r(n){const e=i.useContext(l);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),i.createElement(l.Provider,{value:e},n.children)}}}]);