"use strict";(self.webpackChunkdevelopment_framework_docs=self.webpackChunkdevelopment_framework_docs||[]).push([[7002],{35633:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var i=t(74848),r=t(28453);const o={},a="DataGridPluginConfig.json",s={id:"libraries/plugins/data_grid/DataGridConfig",title:"DataGridPluginConfig.json",description:"",source:"@site/docs/libraries/plugins/data_grid/DataGridConfig.md",sourceDirName:"libraries/plugins/data_grid",slug:"/libraries/plugins/data_grid/DataGridConfig",permalink:"/dm-docs/docs/libraries/plugins/data_grid/DataGridConfig",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"useRecipe",permalink:"/dm-docs/docs/libraries/@development-framework/dm-core-plugins/Hooks/useRecipe"},next:{title:"FormFunctionalityConfig.json",permalink:"/dm-docs/docs/libraries/plugins/form/FormConfig"}},u={},l=[];function p(e){const n={code:"code",h1:"h1",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"datagridpluginconfigjson",children:"DataGridPluginConfig.json"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "name": "DataGridPluginConfig",\n  "type": "CORE:Blueprint",\n  "attributes": [\n    {\n      "name": "type",\n      "type": "CORE:BlueprintAttribute",\n      "attributeType": "string"\n    },\n    {\n      "name": "title",\n      "type": "CORE:BlueprintAttribute",\n      "attributeType": "string",\n      "default": "",\n      "optional": true\n    },\n    {\n      "name": "description",\n      "type": "CORE:BlueprintAttribute",\n      "attributeType": "string",\n      "default": "",\n      "optional": true\n    },\n    {\n      "name": "fieldNames",\n      "type": "CORE:BlueprintAttribute",\n      "description": "If more than one field is selected, the arrays have to be 1-dimensional.",\n      "attributeType": "string",\n      "dimensions": "*"\n    },\n    {\n      "name": "editable",\n      "type": "CORE:BlueprintAttribute",\n      "attributeType": "boolean",\n      "default": true,\n      "optional": true\n    },\n    {\n      "name": "showColumns",\n      "type": "CORE:BlueprintAttribute",\n      "attributeType": "boolean",\n      "default": true,\n      "optional": true\n    },\n    {\n      "name": "adjustableColumns",\n      "type": "CORE:BlueprintAttribute",\n      "attributeType": "boolean",\n      "default": true,\n      "optional": true\n    },\n    {\n      "name": "columnLabels",\n      "type": "CORE:BlueprintAttribute",\n      "description": "Define column labels or use predefined columns. Predefined values are ABC, ZYX, 123 and you can select those by using the spread operator [\'...ABC\']. You can also merge the two like this: [\'custom field\', \'custom field2\', \'...ABC\']",\n      "attributeType": "string",\n      "default": ["...ABC"],\n      "dimensions": "*",\n      "optional": true\n    },\n    {\n      "name": "showRows",\n      "type": "CORE:BlueprintAttribute",\n      "attributeType": "boolean",\n      "default": true,\n      "optional": true\n    },\n    {\n      "name": "adjustableRows",\n      "type": "CORE:BlueprintAttribute",\n      "attributeType": "boolean",\n      "default": true,\n      "optional": true\n    },\n    {\n      "name": "movableRows",\n      "type": "CORE:BlueprintAttribute",\n      "attributeType": "boolean",\n      "default": true,\n      "optional": true\n    },\n    {\n      "name": "rowLabels",\n      "type": "CORE:BlueprintAttribute",\n      "description": "Define row labels or use predefined rows. Predefined values are ABC, ZYX, 123and you can select those by using the spread operator [\'...ABC\']. You can also merge the two like this: [\'custom field\', \'custom field2\', \'...ABC\']",\n      "attributeType": "string",\n      "default": ["...123"],\n      "dimensions": "*",\n      "optional": true\n    },\n    {\n      "name": "printDirection",\n      "type": "CORE:BlueprintAttribute",\n      "description": "Which direction should rows be printed. Horizontal means printing rows top-down, vertical means left-right.",\n      "attributeType": "string",\n      "default": "horizontal",\n      "optional": true\n    },\n    {\n      "name": "rowsPerPage",\n      "type": "CORE:BlueprintAttribute",\n      "description": "How many rows per page should be pre-selected in the pagination when datagrid loads.",\n      "attributeType": "number",\n      "default": 25,\n      "optional": true\n    },\n    {\n      "name": "hidePaginationIfLessThan",\n      "type": "CORE:BlueprintAttribute",\n      "description": "Hide the pagination if rows are less than x values.",\n      "attributeType": "number",\n      "default": 0,\n      "optional": true\n    }\n  ]\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var i=t(96540);const r={},o=i.createContext(r);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);