"use strict";(self.webpackChunkdevelopment_framework_docs=self.webpackChunkdevelopment_framework_docs||[]).push([[4054],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(r),m=a,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3744:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const o={},i="Glossary of terms (ubiquitous language)",s={unversionedId:"guides/development/architecture/glossery-of-terms",id:"guides/development/architecture/glossery-of-terms",title:"Glossary of terms (ubiquitous language)",description:"(alphabetically sorted)",source:"@site/docs/guides/development/architecture/glossery-of-terms.md",sourceDirName:"guides/development/architecture",slug:"/guides/development/architecture/glossery-of-terms",permalink:"/dm-docs/docs/guides/development/architecture/glossery-of-terms",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Clean architecture",permalink:"/dm-docs/docs/guides/development/architecture/clean-architecture"},next:{title:"Debugging",permalink:"/dm-docs/docs/guides/development/debugging"}},c={},l=[],u={toc:l};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"glossary-of-terms-ubiquitous-language"},"Glossary of terms (ubiquitous language)"),(0,a.kt)("p",null,"(alphabetically sorted)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Blueprint: Data model. A generic way of describe data. It describes data structure in a language and technology agnostic way. There are no methods defined in a blueprint, it only describes the structure of the data."),(0,a.kt)("li",{parentName:"ul"},"Entity: The actual data."),(0,a.kt)("li",{parentName:"ul"},"Recipe: Configuration for how to store, view, migrate data. Recipes needs to have a context, that is the plugin to be used and in what application. Different applications have different recipes."),(0,a.kt)("li",{parentName:"ul"},"Plugins: A plugin is an implementation that receives a recipe and the actual data, and make decisions based on a recipe. Plugins exists for UI, and storage.")))}p.isMDXComponent=!0}}]);