"use strict";(self.webpackChunkdevelopment_framework_docs=self.webpackChunkdevelopment_framework_docs||[]).push([[6894],{61680:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>o});var s=n(74848),i=n(28453);const r={sidebar_position:1},d="Blueprints and entities",l={id:"concepts/blueprints",title:"Blueprints and entities",description:"Blueprints and entitites are the core of the Development Framework. Understanding them is essential, but not trivial, so if you have any questions after reading this article, please do not hesitate to ask.",source:"@site/docs/concepts/blueprints.md",sourceDirName:"concepts",slug:"/concepts/blueprints",permalink:"/dm-docs/docs/concepts/blueprints",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/dm-docs/docs/getting-started"},next:{title:"Recipes",permalink:"/dm-docs/docs/concepts/recipes"}},a={},o=[{value:"What is a Blueprint?",id:"what-is-a-blueprint",level:2},{value:"What is an entity?",id:"what-is-an-entity",level:2},{value:"How to create a Blueprint?",id:"how-to-create-a-blueprint",level:2},{value:"system/SIMOS/Blueprint",id:"systemsimosblueprint",level:3},{value:"system/SIMOS/BlueprintAttribute",id:"systemsimosblueprintattribute",level:3},{value:"References to other blueprints",id:"references",level:2},{value:"Model and storage containment",id:"model-and-storage-containment",level:2},{value:"Model containment",id:"model-containment",level:3},{value:"Storage containment",id:"storage-containment",level:3}];function c(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"blueprints-and-entities",children:"Blueprints and entities"}),"\n",(0,s.jsx)(t.p,{children:"Blueprints and entitites are the core of the Development Framework. Understanding them is essential, but not trivial, so if you have any questions after reading this article, please do not hesitate to ask."}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsx)(t.p,{children:"Entities are to blueprints what objects are to classes."})}),"\n",(0,s.jsx)(t.h2,{id:"what-is-a-blueprint",children:"What is a Blueprint?"}),"\n",(0,s.jsxs)(t.p,{children:["A blueprint is described in ",(0,s.jsx)(t.a,{href:"https://www.json.org/json-en.html",children:"JSON"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"Below is a short version of a Car blueprint."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",metastring:'showLineNumbers title="Car.blueprint.json"',children:'{\n  "name": "Car",\n  "type": "dmss://system/SIMOS/Blueprint",\n  "description": "A description of a car",\n  "attributes": [\n    {\n      "name": "type",\n      "type": "dmss://system/SIMOS/BlueprintAttribute",\n      "attributeType": "string"\n    },\n    {\n      "name": "carModel",\n      "type": "dmss://system/SIMOS/BlueprintAttribute",\n      "attributeType": "string"\n    },\n    {\n      "name": "registrationNumber",\n      "type": "dmss://system/SIMOS/BlueprintAttribute",\n      "attributeType": "string"\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"What can we read out of this code?"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Line 2 contains the name of the blueprint, which is used when referring to this blueprint."}),"\n",(0,s.jsxs)(t.li,{children:["Line 3 contains the type of the blueprint. The word ",(0,s.jsx)(t.code,{children:"type"})," carries some extra meaning in the Development Framework since it tells us which blueprint a blueprint or entity is implementing. In this case, it tells us that this JSON object is of type ",(0,s.jsx)(t.a,{href:"https://github.com/equinor/data-modelling-storage-service/blob/master/src/home/system/SIMOS/Blueprint.json",children:"dmss://system/SIMOS/Blueprint"}),", and will therefore have attributes such as ",(0,s.jsx)(t.code,{children:"name"}),", ",(0,s.jsx)(t.code,{children:"type"}),", ",(0,s.jsx)(t.code,{children:"description"})," and ",(0,s.jsx)(t.code,{children:"attributes"}),". If you open the URL, you can see that it links to a blueprint with name Blueprint and type ",(0,s.jsx)(t.code,{children:"dmss://system/SIMOS/Blueprint"}),". That means that the Blueprint blueprint actually implements itself!"]}),"\n",(0,s.jsx)(t.li,{children:"Line 4 contains the description of the blueprint, which tells us that this blueprint can be used to describe a car."}),"\n",(0,s.jsxs)(t.li,{children:["Line 5 to 21 list the attributes of the blueprint - ",(0,s.jsx)(t.code,{children:"type"}),", ",(0,s.jsx)(t.code,{children:"carModel"})," and ",(0,s.jsx)(t.code,{children:"registrationNumber"}),". All entities implementing this blueprint must have these three attributes, and only them. An attribute definition is always an implementation of the ",(0,s.jsx)(t.a,{href:"https://github.com/equinor/data-modelling-storage-service/blob/master/src/home/system/SIMOS/BlueprintAttribute.json",children:"dmss://system/SIMOS/BlueprintAttribute"}),", hence the type."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"what-is-an-entity",children:"What is an entity?"}),"\n",(0,s.jsx)(t.p,{children:"An entity populates the attributes of the blueprint with real values."}),"\n",(0,s.jsxs)(t.p,{children:["An entity of the ",(0,s.jsx)(t.code,{children:"Car"})," blueprint described above can look like this:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",metastring:'showLineNumbers title="car.entity.json"',children:'{\n  "type": "./Car",\n  "carModel": "Skoda Octavia",\n  "registrationNumber": "AB12345"\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:'The entity has exactly three attributes ("type", "carModel", and "registrationNumber"), all of which are defined in the attribute list of the Car blueprint.'}),"\n",(0,s.jsxs)(t.p,{children:["Notice how the ",(0,s.jsx)(t.code,{children:"type"})," attribute refers to the name attribute of the blueprint we wrote above? For more info about how to reference blueprints, see ",(0,s.jsx)(t.a,{href:"#references",children:"References to other blueprints"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"how-to-create-a-blueprint",children:"How to create a Blueprint?"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"name"})," should reflect what the model is, and should be written in CamelCase."]}),"\n",(0,s.jsxs)(t.p,{children:["For blueprints, the ",(0,s.jsx)(t.code,{children:"type"})," should be a reference to ",(0,s.jsx)(t.a,{href:"https://github.com/equinor/data-modelling-storage-service/blob/master/src/home/system/SIMOS/Blueprint.json",children:(0,s.jsx)(t.code,{children:"system/SIMOS/Blueprint"})}),", which is the Blueprint that is used to describe all other blueprints."]}),"\n",(0,s.jsxs)(t.p,{children:["For each blueprint attribute, the ",(0,s.jsx)(t.code,{children:"type"})," should be a reference to ",(0,s.jsx)(t.a,{href:"https://github.com/equinor/data-modelling-storage-service/blob/master/src/home/system/SIMOS/BlueprintAttribute.json",children:(0,s.jsx)(t.code,{children:"system/SIMOS/BlueprintAttribute"})}),", which is the Blueprint that describe the attributes for Blueprints."]}),"\n",(0,s.jsx)(t.h3,{id:"systemsimosblueprint",children:"system/SIMOS/Blueprint"}),"\n",(0,s.jsxs)(t.p,{children:["Has the following attributes, where ",(0,s.jsx)(t.code,{children:"name"})," and ",(0,s.jsx)(t.code,{children:"type"})," is required."]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Attribute"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"type"}),(0,s.jsx)(t.td,{children:"string"}),(0,s.jsx)(t.td,{children:"A reference to the Blueprint type."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"name"}),(0,s.jsx)(t.td,{children:"string"}),(0,s.jsx)(t.td,{children:"The name of the blueprint"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"description"}),(0,s.jsx)(t.td,{children:"string"}),(0,s.jsx)(t.td,{children:"More information about the blueprint"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"extends"}),(0,s.jsx)(t.td,{children:"string"}),(0,s.jsx)(t.td,{children:"A list of references to other blueprints. The blueprint will inherit all the attributes from the blueprint(s) it extends from."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"attributes"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"system/SIMOS/BlueprintAttribute"})}),(0,s.jsx)(t.td,{children:"List of attributes."})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"systemsimosblueprintattribute",children:"system/SIMOS/BlueprintAttribute"}),"\n",(0,s.jsxs)(t.p,{children:["Has the following attributes, where ",(0,s.jsx)(t.code,{children:"name"}),", ",(0,s.jsx)(t.code,{children:"attributeType"})," and ",(0,s.jsx)(t.code,{children:"type"})," is required."]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Attribute"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"name"}),(0,s.jsx)(t.td,{children:"string"}),(0,s.jsx)(t.td,{children:"Name of the attribute."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"type"}),(0,s.jsx)(t.td,{children:"string"}),(0,s.jsx)(t.td,{children:"A reference to the BlueprintAttribute type."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"description"}),(0,s.jsx)(t.td,{children:"string"}),(0,s.jsx)(t.td,{children:"Extra information"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"attributeType"}),(0,s.jsx)(t.td,{children:"string"}),(0,s.jsx)(t.td,{children:"The attribute type. Can be a reference to another blueprint, or a primitive type (string, integer, number, boolean)."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"dimensions"}),(0,s.jsx)(t.td,{children:"string"}),(0,s.jsxs)(t.td,{children:["Degree of dimensions, formatted as a comma separated list of integers or ",(0,s.jsx)(t.code,{children:"*"}),". The ",(0,s.jsx)(t.code,{children:"*"}),' (wildcard) has the special meaning of "unknown length". Ex: ',(0,s.jsx)(t.code,{children:"*"})," (1D of unknown length), ",(0,s.jsx)(t.code,{children:"2,2"})," (2D of size 2x2), ",(0,s.jsx)(t.code,{children:"3,*"})," (2D, where the inner array have unknown length and the outer array have length 3)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"label"}),(0,s.jsx)(t.td,{children:"string"}),(0,s.jsx)(t.td,{children:"A pretty variant of the attribute name, used to display the attribute name in a user friendly manner."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"default"}),(0,s.jsx)(t.td,{children:"any json"}),(0,s.jsx)(t.td,{children:"Default value for the attribute. Same type as the attribute itself"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"optional"}),(0,s.jsx)(t.td,{children:"boolean"}),(0,s.jsx)(t.td,{children:"If the attribute is optional or required"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"contained"}),(0,s.jsx)(t.td,{children:"boolean"}),(0,s.jsx)(t.td,{children:"Can be used for non-primitive attributes to describes the conceptual belonging of one entity to another. A contained attribute is owned by the document listing it, and will be deleted alongside its parent. An uncontained attribute is owned by another document."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"enumType"}),(0,s.jsx)(t.td,{children:"string"}),(0,s.jsxs)(t.td,{children:["Can be used as an extra limitation on primitive attributes. Ex: Setting attributeType to string and enumType to ",(0,s.jsx)(t.a,{href:"https://github.com/equinor/data-modelling-storage-service/blob/master/src/home/system/SIMOS/enums/StorageTypes.json",children:"dmss://system/SIMOS/enums/StorageTypes"}),' will limit the valid options to "default", "blob", "video", "large" and "veryLarge".']})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"references",children:"References to other blueprints"}),"\n",(0,s.jsxs)(t.p,{children:["It is possible to reference other blueprint from the ",(0,s.jsx)(t.code,{children:"type"}),", ",(0,s.jsx)(t.code,{children:"extends"}),", ",(0,s.jsx)(t.code,{children:"attributeType"}),", and ",(0,s.jsx)(t.code,{children:"_blueprintPath_"})," attributes."]}),"\n",(0,s.jsxs)(t.p,{children:["There are several ways to describe a reference to other blueprints, all of which are understood and resolved during import. For example, if you write in your local .json file the\naddress ",(0,s.jsx)(t.code,{children:"CORE:Blueprint"})," or ",(0,s.jsx)(t.code,{children:"./blueprints/Car"})," and upload the blueprints to dmss, then those addresses will be translated to for example ",(0,s.jsx)(t.code,{children:"dmss://system/SIMOS/Blueprint"}),"\nand ",(0,s.jsx)(t.code,{children:"dmss://DemoDataSource/carPackage/Car"})," before the documents are saved in the database."]}),"\n",(0,s.jsx)(t.p,{children:'Note that the reference is created using the name attribute of the blueprint you want to refer to, not its filename. I.e. "Car", not "Car.blueprint.json".'}),"\n",(0,s.jsx)(t.p,{children:"Example of address types:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Address type"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Example"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"By path"}),(0,s.jsx)(t.td,{children:"Full absolute path prefixed with protocol"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:"dmss://datasource/package/entity"})," or ",(0,s.jsx)(t.code,{children:"dmss://datasource/package/subfolder/entity"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"By id"}),(0,s.jsxs)(t.td,{children:["Refer to a document using id. The id must be prefixed with a ",(0,s.jsx)(t.code,{children:"$"})," sign."]}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"dmss://datasource/$2d7c3249-985d-43d2-83cf-a887e440825a"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"By alias"}),(0,s.jsxs)(t.td,{children:["Require dependencies to be defined somewhere in the source tree using ",(0,s.jsx)(t.a,{href:"/dm-docs/docs/concepts/meta",children:(0,s.jsx)(t.em,{children:"meta"})})," information."]}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:"ALIAS:package/entity"})," or ",(0,s.jsx)(t.code,{children:"ALIAS:entity"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"By data source"}),(0,s.jsx)(t.td,{children:"Relative from the destination data source."}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:"/package/entity"})," or ",(0,s.jsx)(t.code,{children:"/package/subfolder/entity"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"By Package"}),(0,s.jsx)(t.td,{children:"Relative from the source package"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:"entity"})," or ",(0,s.jsx)(t.code,{children:"subfolder/entity"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"By dotted relative path"}),(0,s.jsx)(t.td,{children:"Relative from the file (UNIX directory traversal)"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:"./.../entity"})," or  ",(0,s.jsx)(t.code,{children:"../subfolder/entity"}),"or ",(0,s.jsx)(t.code,{children:"../../subfolder/entity"})]})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"Other syntax option  - these will work together with the address types in the above table."}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Example"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Dot"}),(0,s.jsx)(t.td,{children:"Reference a complex attribute inside an entity"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"dmss://datasource/carPackage/car.engine.fuelPump"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Brackets"}),(0,s.jsx)(t.td,{children:"Use brackets + index to refer to list elements."}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"dmss://datasource/carPackage/car.wheels[0]"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Hat"}),(0,s.jsxs)(t.td,{children:["Use the ",(0,s.jsx)(t.code,{children:"^"})," syntax to refer to the document itself."]}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:'"^.cars[1]"'}),", Also see example below"]})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"Example of hat syntax :"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "name": "Hertz",\n  "type": "./blueprints/CarRentalCompany",\n  "cars": [\n    {\n      "type": "./blueprints/Car",\n      "plateNumber": "1337",\n      "name": "Volvo"\n    }\n  ],\n  "customers": [\n    {\n      "type": "./blueprints/Customer",\n      "phoneNumber": 1337,\n      "name": "Jane",\n      "car": {\n        "address": "^.cars[0]",\n        "type": "CORE:Reference",\n        "referenceType": "link"\n      }\n    }\n  ]\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Here, the address stored in ",(0,s.jsx)(t.code,{children:"Hertz.customers[0].car.address"})," refers to ",(0,s.jsx)(t.code,{children:"Hertz.cars[0]"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"model-and-storage-containment",children:"Model and storage containment"}),"\n",(0,s.jsx)(t.p,{children:"For entities, we have the concept of containment either on a model or storage level."}),"\n",(0,s.jsx)(t.h3,{id:"model-containment",children:"Model containment"}),"\n",(0,s.jsxs)(t.p,{children:["By ",(0,s.jsx)(t.code,{children:"model contained"}),", we mean that an entity belongs inside another entity.\nThis is determined by the boolean ",(0,s.jsx)(t.code,{children:"contained"})," flag in the BlueprintAttribute. By default, contained is set to true."]}),"\n",(0,s.jsx)(t.p,{children:"Model contained example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "name": "Jason",\n  "type": "./Employee",\n  "manager": {\n    "type": "./Employee",\n    "name": "Bill",\n    "age": 33\n  },\n  "age": 27\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["For the employee ",(0,s.jsx)(t.code,{children:"Jason"}),", the manager attribute is contained inside the entity."]}),"\n",(0,s.jsx)(t.p,{children:"Model uncontained example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "name": "Jason",\n  "type": "./Employee",\n  "manager": {\n    "type": "dmss://system/SIMOS/Reference",\n    "address": "DataSoruce/apps/EmployeeApp/Bill",\n    "referenceType": "link"\n  },\n  "age": 27\n}\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "type": "./Employee",\n  "name": "Bill",\n  "age": 33\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["In this case, the manager attribute is a ",(0,s.jsx)(t.code,{children:"link reference"})," to another entity stored somewhere in the database."]}),"\n",(0,s.jsxs)(t.p,{children:["When fetching an entity from dmss, a ",(0,s.jsx)(t.code,{children:"depth"})," parameter can be included in the GET request to determine whether or not\nthe reference should be resolved.\n(Resolving a link reference means that a link reference is replaced by the actual entity the link reference points to.)"]}),"\n",(0,s.jsx)(t.p,{children:"If depth=0, the document will be returned without resolving any link references. If depth is higher than 1, references will be resolved."}),"\n",(0,s.jsx)(t.h3,{id:"storage-containment",children:"Storage containment"}),"\n",(0,s.jsxs)(t.p,{children:["Unlike model containment, storage containment is defined in a blueprint's ",(0,s.jsx)(t.code,{children:"RecipeLink"})," and not in the blueprint itself.\nIf not specified, storage containment is set to true for all attributes in a blueprint."]}),"\n",(0,s.jsx)(t.p,{children:"Example fo storage uncontained:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "type": "CORE:RecipeLink",\n  "_blueprintPath_": "dmss://DemoDataSource/apps/SimulationApp/blueprints/Simulation",\n  "uiRecipes": {},\n  "storageRecipes": [\n    {\n      "name": "DEFAULT",\n      "type": "dmss://system/SIMOS/StorageRecipe",\n      "description": "",\n      "attributes": [\n        {\n          "name": "bestSimulationResult",\n          "type": "dmss://system/SIMOS/StorageAttribute",\n          "contained": false\n        }\n      ]\n    }\n  ]\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Here, the recipe of the ",(0,s.jsx)(t.code,{children:"Simulation"})," blueprint says that the attribute ",(0,s.jsx)(t.code,{children:"bestSimulationResult"})," is storage uncontained."]}),"\n",(0,s.jsxs)(t.p,{children:["This means that ",(0,s.jsx)(t.code,{children:"bestSimulationResult"})," will be stored separately from the entity of type ",(0,s.jsx)(t.code,{children:"Simulation"})," (in another document in the database)."]}),"\n",(0,s.jsx)(t.p,{children:"When modeling, it will look like this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "name": "simulation1",\n  "type": "DemoDataSource/apps/SimulationApp/blueprints/Simulation",\n  "bestSimulationResult": {\n    "type": "dmss://system/SIMOS/Reference",\n    "address": "dmss://DemoDataSource/apps/SimulationApp/results/bestResult2023",\n    "referenceType": "storage"\n  }\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Storage uncontained attributes will be stored as a storage reference in the entity."})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>l});var s=n(96540);const i={},r=s.createContext(i);function d(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);