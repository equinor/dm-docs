"use strict";(self.webpackChunkdevelopment_framework_docs=self.webpackChunkdevelopment_framework_docs||[]).push([[4719],{56014:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>r});var i=a(74848),l=a(28453);const t={},s=void 0,o={id:"libraries/@development-framework/dm-core-plugins/TablePlugin/Documentation",title:"Documentation",description:"Tables display information in a way that's easy to scan, so that users can look for patterns and insights. They allow you to showcase a variety amounts of structured data and for use in dm applications, a great way for user to navigate nested items and objects.",source:"@site/docs/libraries/@development-framework/dm-core-plugins/TablePlugin/Documentation.md",sourceDirName:"libraries/@development-framework/dm-core-plugins/TablePlugin",slug:"/libraries/@development-framework/dm-core-plugins/TablePlugin/Documentation",permalink:"/dm-docs/docs/libraries/@development-framework/dm-core-plugins/TablePlugin/Documentation",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Blueprints",permalink:"/dm-docs/docs/libraries/@development-framework/dm-core-plugins/TablePlugin/Blueprints"},next:{title:"Basic Table",permalink:"/dm-docs/docs/libraries/@development-framework/dm-core-plugins/TablePlugin/Examples/Basic.json"}},d={},r=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"Variants",id:"variants",level:2},{value:"Passing data",id:"passing-data",level:2},{value:"Scope to list",id:"scope",level:3},{value:"Selecting data",id:"selecting-data",level:3},{value:"Column config",id:"column-config",level:3},{value:"dataType",id:"datatype",level:4},{value:"presentAs",id:"presentas",level:4},{value:"labels",id:"labels",level:4},{value:"editable",id:"editable",level:4},{value:"sortable",id:"sortable",level:4},{value:"Entry points to new tab and expandable content",id:"entry-points-to-new-tab-and-expandable-content",level:3},{value:"Open in new tab",id:"open-in-new-tab",level:4},{value:"Expandable",id:"expandable",level:4},{value:"When using expandable for table items you can also pass a custom viewConfig for only this view by using the <code>expandableViewConfig</code> config field.---\nsidebar_position: 0\ntitle: TablePlugin\nsidebar_label: Documentation",id:"when-using-expandable-for-table-items-you-can-also-pass-a-custom-viewconfig-for-only-this-view-by-using-the-expandableviewconfig-config-field---sidebar_position-0title-tablepluginsidebar_label-documentation",level:2},{value:"Table of contents",id:"table-of-contents-1",level:2},{value:"Variants",id:"variants",level:2},{value:"Passing data",id:"passing-data",level:2},{value:"Scope to list",id:"scope",level:3},{value:"Selecting data",id:"selecting-data",level:3},{value:"Column config",id:"column-config",level:3},{value:"dataType",id:"datatype-1",level:4},{value:"presentAs",id:"presentas-1",level:4},{value:"labels",id:"labels-1",level:4},{value:"editable",id:"editable-1",level:4},{value:"sortable",id:"sortable-1",level:4},{value:"Entry points to new tab and expandable content",id:"entry-points-to-new-tab-and-expandable-content-1",level:3},{value:"Open in new tab",id:"open-in-new-tab-1",level:4},{value:"Expandable",id:"expandable-1",level:4}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Tables display information in a way that's easy to scan, so that users can look for patterns and insights. They allow you to showcase a variety amounts of structured data and for use in dm applications, a great way for user to navigate nested items and objects."}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of contents"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#variants",children:"Table variants"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#passing-data",children:"Passing data"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#scope",children:"Scope to list"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#selecting-data",children:"Selecting data"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#column-config",children:"Column config"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#functionality",children:"Functionality"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#limiting-editing",children:"Enabling/disabling functionality"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#sorting",children:"Sorting"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"variants",children:"Variants"}),"\n",(0,i.jsxs)(n.p,{children:["Table config expects a list of table variants. Available variants are ",(0,i.jsx)(n.code,{children:"view"})," and ",(0,i.jsx)(n.code,{children:"edit"}),". You can pass one or both variants in the list - if both variants are enabled/passed, user can switch modes in the UI. The initial table variant that shows in the UI is based on which variant is passed first in the variant list."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="table-variant.recipe.json',children:'"variant": [\n    {\n        "name": "view",\n        "type": "PLUGINS:dm-core-plugins/table/TableVariantConfig",\n        "functionality": {\n            "add": false,\n            "delete": false\n        },\n        "density": "comfortable",\n    },\n    {\n        "name": "edit",\n        "type": "PLUGINS:dm-core-plugins/table/TableVariantConfig",\n    }\n]\n'})}),"\n",(0,i.jsx)(n.h2,{id:"passing-data",children:"Passing data"}),"\n",(0,i.jsx)(n.h3,{id:"scope",children:"Scope to list"}),"\n",(0,i.jsx)(n.p,{children:"Table expects a list of objects. List is passed to the plugin by using the scope method in ViewConfig."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"{4}",children:'"viewConfig": {\n    "type": "CORE:ReferenceViewConfig",\n    "recipe": {\u2026},\n    "scope": "list_attribute_name"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"selecting-data",children:"Selecting data"}),"\n",(0,i.jsxs)(n.p,{children:["Select fields from objects in list passed to table by defining columns and passing field name in the ",(0,i.jsx)(n.code,{children:"data"})," field."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"{7}",children:'"recipe": {\n    "config": {\n        "type": "PLUGINS:dm-core-plugins/table/TablePluginConfig",\n        "columns": [\n            {\n                "type": "./TableColumnConfig",\n                "data": "name",\n                "label": "Name"\n            }\n        ]\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"You can also select data by using dot syntax to show and edit nested data in objects."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"{7,12}",children:'"recipe": {\n    "config": {\n        "type": "PLUGINS:dm-core-plugins/table/TablePluginConfig",\n        "columns": [\n            {\n                "type": "./TableColumnConfig",\n                "data": "person.firstName",\n                "label": "First Name"\n            },\n            {\n                "type": "./TableColumnConfig",\n                "data": "hobbies[0].name",\n                "label": "Favorite hobby"\n            }\n        ]\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"column-config",children:"Column config"}),"\n",(0,i.jsx)(n.h4,{id:"datatype",children:"dataType"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"dataType"})," is used to format fields when you're editing and saving data. Available types are ",(0,i.jsx)(n.code,{children:"'string' | 'boolean' | 'number' | 'datetime'"}),". The type should match the attribute type in blueprint."]}),"\n",(0,i.jsx)(n.h4,{id:"presentas",children:"presentAs"}),"\n",(0,i.jsxs)(n.p,{children:["When dataType is boolean, by default the field is shown as a checkbox in the table. Value can also be shown as plain text by setting ",(0,i.jsx)(n.code,{children:"presentAs"})," to ",(0,i.jsx)(n.code,{children:"text"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"labels",children:"labels"}),"\n",(0,i.jsx)(n.p,{children:"Set column header label."}),"\n",(0,i.jsx)(n.h4,{id:"editable",children:"editable"}),"\n",(0,i.jsxs)(n.p,{children:["Even if you're table is editable, it's possible to disable editing for individual columns by setting ",(0,i.jsx)(n.code,{children:"editable"})," to ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"sortable",children:"sortable"}),"\n",(0,i.jsxs)(n.p,{children:["Sortable columns can be enabled by setting ",(0,i.jsx)(n.code,{children:"sortable"})," to ",(0,i.jsx)(n.code,{children:"true"}),". Sorting is only available in view/no-edit variant of table."]}),"\n",(0,i.jsx)(n.h3,{id:"entry-points-to-new-tab-and-expandable-content",children:"Entry points to new tab and expandable content"}),"\n",(0,i.jsxs)(n.p,{children:["There are two predefined fieldNames that allows you to add functionality to make the row expandable and open the table item in a new tab. These are prefixed by ",(0,i.jsx)(n.code,{children:"^"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"open-in-new-tab",children:"Open in new tab"}),"\n",(0,i.jsx)(n.p,{children:"Opens item in new tab. Should be used in accordance with TabsPlugin/a view selector."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"{7}",children:'"recipe": {\n    "config": {\n        "type": "PLUGINS:dm-core-plugins/table/TablePluginConfig",\n        "columns": [\n            {\n                "type": "./TableColumnConfig",\n                "data": "^tab",\n            }\n        ]\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"expandable",children:"Expandable"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"{7}",children:'"recipe": {\n    "config": {\n        "type": "PLUGINS:dm-core-plugins/table/TablePluginConfig",\n        "columns": [\n            {\n                "type": "./TableColumnConfig",\n                "data": "^expandable",\n            }\n        ]\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"when-using-expandable-for-table-items-you-can-also-pass-a-custom-viewconfig-for-only-this-view-by-using-the-expandableviewconfig-config-field---sidebar_position-0title-tablepluginsidebar_label-documentation",children:["When using expandable for table items you can also pass a custom viewConfig for only this view by using the ",(0,i.jsx)(n.code,{children:"expandableViewConfig"})," config field.---\nsidebar_position: 0\ntitle: TablePlugin\nsidebar_label: Documentation"]}),"\n",(0,i.jsx)(n.p,{children:"Tables display information in a way that's easy to scan, so that users can look for patterns and insights. They allow you to showcase a variety amounts of structured data and for use in dm applications, a great way for user to navigate nested items and objects."}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents-1",children:"Table of contents"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#variants",children:"Table variants"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#passing-data",children:"Passing data"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#scope",children:"Scope to list"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#selecting-data",children:"Selecting data"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#column-config",children:"Column config"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#functionality",children:"Functionality"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#limiting-editing",children:"Enabling/disabling functionality"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#sorting",children:"Sorting"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"variants",children:"Variants"}),"\n",(0,i.jsxs)(n.p,{children:["Table config expects a list of table variants. Available variants are ",(0,i.jsx)(n.code,{children:"view"})," and ",(0,i.jsx)(n.code,{children:"edit"}),". You can pass one or both variants in the list - if both variants are enabled/passed, user can switch modes in the UI. The initial table variant that shows in the UI is based on which variant is passed first in the variant list."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="table-variant.recipe.json',children:'"variant": [\n    {\n        "name": "view",\n        "type": "PLUGINS:dm-core-plugins/table/TableVariantConfig",\n        "functionality": {\n            "add": false,\n            "delete": false\n        },\n        "density": "comfortable",\n    },\n    {\n        "name": "edit",\n        "type": "PLUGINS:dm-core-plugins/table/TableVariantConfig",\n    }\n]\n'})}),"\n",(0,i.jsx)(n.h2,{id:"passing-data",children:"Passing data"}),"\n",(0,i.jsx)(n.h3,{id:"scope",children:"Scope to list"}),"\n",(0,i.jsx)(n.p,{children:"Table expects a list of objects. List is passed to the plugin by using the scope method in ViewConfig."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"{4}",children:'"viewConfig": {\n    "type": "CORE:ReferenceViewConfig",\n    "recipe": {\u2026},\n    "scope": "list_attribute_name"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"selecting-data",children:"Selecting data"}),"\n",(0,i.jsxs)(n.p,{children:["Select fields from objects in list passed to table by defining columns and passing field name in the ",(0,i.jsx)(n.code,{children:"data"})," field."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"{7}",children:'"recipe": {\n    "config": {\n        "type": "PLUGINS:dm-core-plugins/table/TablePluginConfig",\n        "columns": [\n            {\n                "type": "./TableColumnConfig",\n                "data": "name",\n                "label": "Name"\n            }\n        ]\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"You can also select data by using dot syntax to show and edit nested data in objects."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"{7,12}",children:'"recipe": {\n    "config": {\n        "type": "PLUGINS:dm-core-plugins/table/TablePluginConfig",\n        "columns": [\n            {\n                "type": "./TableColumnConfig",\n                "data": "person.firstName",\n                "label": "First Name"\n            },\n            {\n                "type": "./TableColumnConfig",\n                "data": "hobbies[0].name",\n                "label": "Favorite hobby"\n            }\n        ]\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"column-config",children:"Column config"}),"\n",(0,i.jsx)(n.h4,{id:"datatype-1",children:"dataType"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"dataType"})," is used to format fields when you're editing and saving data. Available types are ",(0,i.jsx)(n.code,{children:"'string' | 'boolean' | 'number' | 'datetime'"}),". The type should match the attribute type in blueprint."]}),"\n",(0,i.jsx)(n.h4,{id:"presentas-1",children:"presentAs"}),"\n",(0,i.jsxs)(n.p,{children:["When dataType is boolean, by default the field is shown as a checkbox in the table. Value can also be shown as plain text by setting ",(0,i.jsx)(n.code,{children:"presentAs"})," to ",(0,i.jsx)(n.code,{children:"text"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"labels-1",children:"labels"}),"\n",(0,i.jsx)(n.p,{children:"Set column header label."}),"\n",(0,i.jsx)(n.h4,{id:"editable-1",children:"editable"}),"\n",(0,i.jsxs)(n.p,{children:["Even if you're table is editable, it's possible to disable editing for individual columns by setting ",(0,i.jsx)(n.code,{children:"editable"})," to ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"sortable-1",children:"sortable"}),"\n",(0,i.jsxs)(n.p,{children:["Sortable columns can be enabled by setting ",(0,i.jsx)(n.code,{children:"sortable"})," to ",(0,i.jsx)(n.code,{children:"true"}),". Sorting is only available in view/no-edit variant of table."]}),"\n",(0,i.jsx)(n.h3,{id:"entry-points-to-new-tab-and-expandable-content-1",children:"Entry points to new tab and expandable content"}),"\n",(0,i.jsxs)(n.p,{children:["There are two predefined fieldNames that allows you to add functionality to make the row expandable and open the table item in a new tab. These are prefixed by ",(0,i.jsx)(n.code,{children:"^"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"open-in-new-tab-1",children:"Open in new tab"}),"\n",(0,i.jsx)(n.p,{children:"Opens item in new tab. Should be used in accordance with TabsPlugin/a view selector."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"{7}",children:'"recipe": {\n    "config": {\n        "type": "PLUGINS:dm-core-plugins/table/TablePluginConfig",\n        "columns": [\n            {\n                "type": "./TableColumnConfig",\n                "data": "^tab",\n            }\n        ]\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"expandable-1",children:"Expandable"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"{7}",children:'"recipe": {\n    "config": {\n        "type": "PLUGINS:dm-core-plugins/table/TablePluginConfig",\n        "columns": [\n            {\n                "type": "./TableColumnConfig",\n                "data": "^expandable",\n            }\n        ]\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["When using expandable for table items you can also pass a custom viewConfig for only this view by using the ",(0,i.jsx)(n.code,{children:"expandableViewConfig"})," config field."]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>o});var i=a(96540);const l={},t=i.createContext(l);function s(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);