"use strict";(self.webpackChunkdevelopment_framework_docs=self.webpackChunkdevelopment_framework_docs||[]).push([[2679],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),l=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,f=u["".concat(i,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(f,s(s({ref:t},p),{},{components:n})):a.createElement(f,s({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=u;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4084:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const o={title:"Data sources and packages",sidebar_position:4},s=void 0,c={unversionedId:"concepts/data-sources",id:"concepts/data-sources",title:"Data sources and packages",description:"In data modeling storage service (DMSS), documents (blueprints or entities)",source:"@site/docs/concepts/data-sources.md",sourceDirName:"concepts",slug:"/concepts/data-sources",permalink:"/dm-docs/docs/concepts/data-sources",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Data sources and packages",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Plugins",permalink:"/dm-docs/docs/concepts/plugins"},next:{title:"Meta",permalink:"/dm-docs/docs/concepts/meta"}},i={},l=[{value:"Data source",id:"data-source",level:2},{value:"Packages",id:"packages",level:2}],p={toc:l};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/equinor/data-modelling-storage-service"},"data modeling storage service")," (DMSS), documents (blueprints or entities)\nare stored in a ",(0,r.kt)("em",{parentName:"p"},"virtual")," hierarchy of data sources and packages:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Data source",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Root package    ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"document"),(0,r.kt)("li",{parentName:"ul"},"sub package",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"document",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"...")))))))))),(0,r.kt)("p",null,"This hierarchy does not actually exist in the database, but there exists internal logic in DMSS to create this tree structure. "),(0,r.kt)("h2",{id:"data-source"},"Data source"),(0,r.kt)("p",null,"In the topmost layer we have data sources. A data source is an abstraction layer over one or more ",(0,r.kt)("em",{parentName:"p"},"storage repositories")," (can be a Mongo database, Azure file storage, etc)."),(0,r.kt)("p",null,"To define a data source, we create a json file for it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "MyDataSource",\n  "repositories": {\n    "db": {\n      "type": "mongo-db",\n      "host": "db",\n      "port": 27017,\n      "username": "***",\n      "password": "***",\n      "tls": true,\n      "database": "MyDatabase",\n      "collection": "MyDatabaseCollection"\n    }\n  }\n}\n')),(0,r.kt)("p",null,"Internally in DMSS, a lookup table is created for each data source. The lookup table looks something like (when using Mongo DB as a storage repository):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "_id": "system",\n  "name": "system",\n  "repositories": {\n    "a": {\n      "type": "mongo-db",\n      "data_types": null,\n      "host": "db",\n      "port": 27017,\n      "username": "***",\n      "password": "***",\n      "database": "DMSS-core",\n      "collection": "DMSS-core",\n      "account_url": null,\n      "container": null,\n      "tls": false\n    }\n  },\n  "documentLookUp": {\n    "40388758-ee55-46be-bfa6-d3527bc2d12d": {\n      "lookup_id": "40388758-ee55-46be-bfa6-d3527bc2d12d",\n      "repository": "a",\n      "database_id": "40388758-ee55-46be-bfa6-d3527bc2d12d",\n      "acl": {\n        "owner": "dmss-admin",\n        "roles": {\n          "dmss-admin": "WRITE"\n        },\n        "users": {},\n        "others": "READ"\n      },\n      "storage_affinity": "default",\n      "meta": {\n        "created": "2023-08-31 09:06:31.315147"\n      }\n    },\n    "9dfe10a9-b744-46a0-9a47-43a027368b5f": {\n      "lookup_id": "9dfe10a9-b744-46a0-9a47-43a027368b5f",\n      "repository": "a",\n      "database_id": "9dfe10a9-b744-46a0-9a47-43a027368b5f",\n      "acl": {\n        "owner": "dmss-admin",\n        "roles": {\n          "dmss-admin": "WRITE"\n        },\n        "users": {},\n        "others": "READ"\n      },\n      "storage_affinity": "default",\n      "meta": {\n        "created": "2023-08-31 09:06:31.326077"\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,"Note: as of August 2023, the ",(0,r.kt)("inlineCode",{parentName:"p"},"lookup_id")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"database_id")," are equal, but they don't have to be. DMSS uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"lookup_id"),"\nto find the correct document. Internally in the Mongo database, a different id (",(0,r.kt)("inlineCode",{parentName:"p"},"database_id"),") is used."),(0,r.kt)("p",null,"Access control for documents is also handled on the data source level.  In the lookup table the acl attribute determines\nwho should have what access to each document."),(0,r.kt)("h2",{id:"packages"},"Packages"),(0,r.kt)("p",null,"A package is very similar to a folder on your computer's local filesystem. It contains one or more documents (entities, blueprints, sub packages, etc)."),(0,r.kt)("p",null,"A package is either a ",(0,r.kt)("inlineCode",{parentName:"p"},"root package"),", if the package is directly under a data source, or a ",(0,r.kt)("inlineCode",{parentName:"p"},"non-root packages")," if the package exists further down in the hierarchy."),(0,r.kt)("p",null,"Example of a package entity:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "dmss://system/SIMOS/Package",\n    "name": "apps",\n    "isRoot": false,\n    "content": [\n        {\n            "address": "$2305507e-4dbf-40dd-a1c6-4ee24907a534",\n            "type": "dmss://system/SIMOS/Reference",\n            "referenceType": "storage"\n        },\n        {\n            "address": "$c5b8ceff-2775-413c-9546-541606b6cb42",\n            "type": "dmss://system/SIMOS/Reference",\n            "referenceType": "storage"\n        }\n    ]\n}\n')),(0,r.kt)("p",null,"The content list of a package entity is always storage uncontained."))}d.isMDXComponent=!0}}]);